//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "teachers")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
    pub name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub course_id: Option<u64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::courses::Entity",
        from = "Column::CourseId",
        to = "super::courses::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Courses,
    #[sea_orm(has_many = "super::sessions::Entity")]
    Sessions,
}

impl Related<super::courses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Courses.def()
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl Related<super::students::Entity> for Entity {
    fn to() -> RelationDef {
        super::student_current_teacher::Relation::Students.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::student_current_teacher::Relation::Teachers
                .def()
                .rev(),
        )
    }
}

impl Related<super::students::Entity> for Entity {
    fn to() -> RelationDef {
        super::student_refer_teacher::Relation::Students.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::student_refer_teacher::Relation::Teachers.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
