//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "students")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
    pub gender: Option<u8>,
    pub age: Option<u8>,
    pub name: Option<String>,
    pub phone: Option<String>,
    pub family_id: Option<u64>,
    pub grade_id: Option<u64>,
    pub school_id: Option<u64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::families::Entity",
        from = "Column::FamilyId",
        to = "super::families::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Families,
    #[sea_orm(
        belongs_to = "super::grades::Entity",
        from = "Column::GradeId",
        to = "super::grades::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Grades,
    #[sea_orm(
        belongs_to = "super::schools::Entity",
        from = "Column::SchoolId",
        to = "super::schools::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Schools,
}

impl Related<super::families::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Families.def()
    }
}

impl Related<super::grades::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Grades.def()
    }
}

impl Related<super::schools::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Schools.def()
    }
}

impl Related<super::courses::Entity> for Entity {
    fn to() -> RelationDef {
        super::student_course::Relation::Courses.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::student_course::Relation::Students.def().rev())
    }
}

impl Related<super::teachers::Entity> for Entity {
    fn to() -> RelationDef {
        super::student_current_teacher::Relation::Teachers.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::student_current_teacher::Relation::Students
                .def()
                .rev(),
        )
    }
}

impl Related<super::teachers::Entity> for Entity {
    fn to() -> RelationDef {
        super::student_refer_teacher::Relation::Teachers.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::student_refer_teacher::Relation::Students.def().rev())
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        super::student_session::Relation::Sessions.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::student_session::Relation::Students.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
